pipeline{
    agent any 

    parameters{
        booleanParam(name: "release", defaultValue: false, description: "Is this a release candidate?")
        string(name: "int_version", defaultValue: '2024.1.2', description: "Version for integrated release")
        string(name: "rel_version", defaultValue: 'R1/2-2024', description: "Release Version")
    }

    stages{
        stage('Audit Tools'){
            steps{
                auditTools()
            }
        }

        stage('Unit Test'){
            
            steps{
                dir('./java-tomcat-sample'){
                unitTest()
            }
         }
        }

        stage('Build'){
            
            environment{

                version_suffix = getBuildVersion()
            }

            
                steps{
                    dir('./java-tomcat-sample'){
                    packageApplication()
                }
            }
        }

        stage('publish'){

            when{
                expression (return params.release)
            }
            steps{
            archiveArtifacts('**/*.war')
        }
        }
    }
}


String getBuildVersion(){
    if (params.release){
        return params.rel_version + ':' + env.build_number
    }

    else{
        return params.int_version + 'ci:' + env.build_number
    }
}

void packageApplication(){
    sh '''
        mvn versions:set -DnewVersion="${version_suffix}"-SNAPSHOT
        mvn versions:update-child-modules
        mvn clean package
    '''
}

void auditTools(){
        sh '''
            git --version
            java -version
            mvn -version

        '''
    }

    void unitTest(){
        sh '''
            mvn validate
            mvn compile
            mvn test
        '''
    }